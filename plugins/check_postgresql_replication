#!/usr/bin/python3

import os
import glob
import time
import sys
import argparse
import psycopg2
from psycopg2.extras import DictCursor

STATE = {
    'Ok': 0,
    'Warning': 1,
    'Critical': 2,
    'Unknown': 3,
}


def get_args():
    parser = argparse.ArgumentParser("Check PostgreSQL Replication")
    parser.add_argument('-w', '--warning', type=int,
                        help='Warning level for offset between master and slave'
                             ' (checked on master)')
    parser.add_argument('-c', '--critical', type=int,
                        help='Critical level for offset between master and slave'
                             ' (checked on master)')
    args = parser.parse_args()

    if args.critical is not None and (args.warning is None or args.warning > args.critical):
        args.warning = args.critical

    return args


def check_master(args, cur):
    try:
        cur.execute("""
            SELECT
                client_addr,
                pg_xlog_location_diff(pg_stat_replication.sent_location,
                    pg_stat_replication.replay_location) AS replay_location_diff,
                pg_xlog_location_diff(pg_stat_replication.sent_location,
                    pg_stat_replication.flush_location) AS flush_location_diff
            FROM pg_stat_replication
            WHERE state = 'streaming'""")
    except Exception:
        print("Critical: Unable to SELECT FROM pg_stat_replication()")
        return STATE['Critical']

    replicas = cur.fetchall()
    if len(replicas) == 0:
        print("Critical: No Streaming Replica's are attached")
        return STATE['Critical']

    if len(replicas) > 1:
        print("Unknown: There are more then 1 Streaming Replica's attached. This is unsupported.")
        return STATE['Unknown']

    replica = replicas[0]

    state = 'Ok'
    if args.critical is None:
        state = 'Unknown'
    elif replica['flush_location_diff'] > args.critical:
        state = 'Critical'
    elif replica['flush_location_diff'] > args.warning:
        state = 'Warning'

    print('%s: Slave %s should still receive %s bytes and replay %s bytes' % (
        state,
        replica['client_addr'],
        replica['flush_location_diff'],
        replica['replay_location_diff'],
    ))

    if args.critical is None:
        print("Unknown limit: argument --critical is missing")

    return STATE[state]


def check_slave(args, cur):
    try:
        cur.execute("""SELECT setting FROM pg_settings WHERE name='data_directory'""")
    except Exception:
        print("Unknown: Unable to SELECT data_directory FROM pg_settings")
        return STATE['Unknown']
    data_directory = cur.fetchone()[0]

    try:
        cur.execute("""SELECT setting::int FROM pg_settings WHERE name='archive_timeout'""")
    except Exception:
        print("Unknown: Unable to SELECT archive_timeout FROM pg_settings")
        return STATE['Unknown']
    archive_timeout = cur.fetchone()[0]

    walfiles = glob.glob('%s/????????????????????????*' % os.path.join(data_directory, 'pg_xlog'))
    if not walfiles:
        print("Unknown: No WAL files found in pg_xlog")
        return STATE['Unknown']
    last_walfile = max(walfiles, key=os.path.getmtime)
    walfile_basename = os.path.basename(last_walfile)
    walfile_mtime = int(os.path.getmtime(last_walfile))
    walfile_seconds_ago = int(time.time()) - walfile_mtime

    state = 'Ok'
    if walfile_seconds_ago > archive_timeout*2:
        state = 'Warning'
    if walfile_seconds_ago > archive_timeout*3:
        state = 'Critical'

    print("%s: pg_xlog/%s was updated %ss ago" % (
        state, walfile_basename, walfile_seconds_ago))
    return STATE[state]


def main():
    args = get_args()
    try:
        conn = psycopg2.connect('')
    except Exception:
        print("Unknown: Unable to connect to database")
        sys.exit(STATE['Unknown'])
    cur = conn.cursor(cursor_factory=DictCursor)

    try:
        cur.execute("""SELECT pg_is_in_recovery()""")
    except Exception:
        print("Unknown: Unable to SELECT pg_is_in_recovery()")
        return STATE['Unknown']
    recovery = cur.fetchone()[0]

    if recovery:
        sys.exit(
            check_slave(args, cur)
        )
    sys.exit(
        check_master(args, cur)
    )


if __name__ == "__main__":
    main()
